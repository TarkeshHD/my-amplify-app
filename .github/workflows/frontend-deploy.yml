name: Create EKS Cluster and Deploy Frontend

on:
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ Checkout repo
      - uses: actions/checkout@v3

      # ‚úÖ Setup Docker Buildx
      - uses: docker/setup-buildx-action@v2

      # ‚úÖ DockerHub login
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ‚úÖ Build and push image
      - name: Build and Push Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/frontend"
          TAG="${GITHUB_SHA::7}"
          echo "Building image: $IMAGE_NAME:$TAG and latest"

          docker build -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" .
          docker push "$IMAGE_NAME:$TAG"
          docker push "$IMAGE_NAME:latest"

      # ‚úÖ Install eksctl and kubectl
      - name: Install eksctl and kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin

      # ‚úÖ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ‚úÖ Check or create EKS cluster
      - name: Check or create EKS cluster
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"

          echo "Checking if cluster $CLUSTER_NAME exists..."
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "‚úÖ Cluster $CLUSTER_NAME already exists."
          else
            echo "üöÄ Creating EKS cluster $CLUSTER_NAME..."
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # ‚úÖ Generate kubeconfig for EKS
      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }}

      # ‚úÖ Deploy Frontend
      - name: Deploy Frontend to EKS
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/frontend"
          TAG="${GITHUB_SHA::7}"
          echo "Deploying image: $IMAGE_NAME:$TAG"

          sed -i "s|image: .*|image: $IMAGE_NAME:$TAG|" frontend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml

      # ‚úÖ Verify rollout
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/frontend-deployment

      # ‚úÖ Get Frontend URL
      - name: Print Frontend URL
        run: |
          echo "‚è≥ Waiting for LoadBalancer IP..."
          for i in {1..20}; do
            HOSTNAME=$(kubectl get svc frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$HOSTNAME" ]; then
              echo "‚úÖ Frontend is live at: http://$HOSTNAME"
              exit 0
            else
              echo "Waiting for external IP..."
              sleep 15
            fi
          done
          echo "‚ùå LoadBalancer IP not available. Check AWS Console for frontend-service."
