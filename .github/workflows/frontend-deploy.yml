name: Create EKS Cluster and Deploy Frontend

on:
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ Checkout code
      - uses: actions/checkout@v3

      # ‚úÖ Setup Docker Buildx
      - uses: docker/setup-buildx-action@v2

      # ‚úÖ Login to DockerHub
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ‚úÖ Build and Push Docker image
      - name: Build and Push Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/frontend"
          TAG="${GITHUB_SHA::7}"
          echo "üöÄ Building image: $IMAGE_NAME:$TAG"
          docker build -t "$IMAGE_NAME:$TAG" -t "$IMAGE_NAME:latest" .
          docker push "$IMAGE_NAME:$TAG"
          docker push "$IMAGE_NAME:latest"

      # ‚úÖ Install eksctl and kubectl
      - name: Install eksctl and kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      # ‚úÖ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ‚úÖ Check or create EKS cluster
      - name: Check or create EKS cluster
        run: |
          CLUSTER_NAME="${{ secrets.EKS_CLUSTER_NAME }}"
          REGION="${{ secrets.AWS_REGION }}"
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "‚úÖ EKS Cluster $CLUSTER_NAME exists."
          else
            echo "‚è≥ Creating EKS cluster $CLUSTER_NAME..."
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed
          fi

      # ‚úÖ Generate kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }}

      # ‚úÖ Install NGINX Ingress
      - name: Install NGINX Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.4/deploy/static/provider/aws/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=Ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=180s

      # ‚úÖ Deploy Frontend Resources
      - name: Deploy Frontend to EKS
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/frontend"
          TAG="${GITHUB_SHA::7}"
          echo "Using image: $IMAGE_NAME:$TAG"
          sed -i "s|image: .*|image: $IMAGE_NAME:$TAG|" frontend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl apply -f ingress.yaml

      # ‚úÖ Wait for deployment to finish
      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/frontend-deployment

      # ‚úÖ Output Final Frontend URL
      - name: Print Frontend URL
        run: |
          echo "‚úÖ Your frontend is live at:"
          echo "üîó https://${{ secrets.CUSTOM_DOMAIN }}"
