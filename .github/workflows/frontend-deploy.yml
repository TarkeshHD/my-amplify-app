name: Create EKS Cluster and Deploy Frontend

on:
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      REGION: ${{ secrets.AWS_REGION }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/frontend
      TAG: ${{ github.sha }}

    steps:
      # âœ… Checkout code
      - uses: actions/checkout@v3

      # âœ… Setup Docker Buildx
      - uses: docker/setup-buildx-action@v2

      # âœ… Login to DockerHub
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # âœ… Build and push Docker image
      - name: Build and Push Docker image
        run: |
          echo "Building image: $IMAGE_NAME:${TAG::7} and latest"
          docker build -t "$IMAGE_NAME:${TAG::7}" -t "$IMAGE_NAME:latest" .
          docker push "$IMAGE_NAME:${TAG::7}"
          docker push "$IMAGE_NAME:latest"

      # âœ… Install eksctl and kubectl
      - name: Install eksctl and kubectl
        run: |
          set -euxo pipefail

          # eksctl
          curl -sSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
            | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/
          eksctl version

          # kubectl
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      # âœ… Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # âœ… Debug: identity and region
      - name: Show AWS identity and zone
        run: |
          aws sts get-caller-identity
          aws ec2 describe-availability-zones --region "$REGION" --output table

      # âœ… Create EKS cluster if not exists
      - name: Check or Create EKS Cluster
        run: |
          set -euxo pipefail

          echo "Checking if EKS cluster \"$CLUSTER_NAME\" exists in region \"$REGION\"..."
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "âœ… Cluster \"$CLUSTER_NAME\" already exists."
          else
            echo "ðŸš€ Creating EKS cluster \"$CLUSTER_NAME\"..."
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed \
              --verbose 4
          fi

      # âœ… Update kubeconfig and test cluster
      - name: Update kubeconfig and get nodes
        run: |
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$REGION"
          kubectl get nodes

      # âœ… Deploy Frontend
      - name: Deploy Frontend to EKS
        run: |
          echo "Deploying image: $IMAGE_NAME:${TAG::7}"
          sed -i "s|image: .*|image: $IMAGE_NAME:${TAG::7}|" frontend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml

      # âœ… Verify Deployment
      - name: Verify Deployment Rollout
        run: |
          kubectl rollout status deployment/frontend-deployment
