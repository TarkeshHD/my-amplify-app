name: Create EKS Cluster and Deploy Frontend

on:
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      REGION: ${{ secrets.AWS_REGION }}
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/frontend
      TAG: ${{ github.sha }}

    steps:
      # ‚úÖ Checkout repo
      - uses: actions/checkout@v3

      # ‚úÖ Setup Docker Buildx
      - uses: docker/setup-buildx-action@v2

      # ‚úÖ DockerHub login
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ‚úÖ Build and push Docker image
      - name: Build and Push Docker image
        run: |
          echo "üî® Building Docker image: $IMAGE_NAME:${TAG::7} and latest"
          docker build -t "$IMAGE_NAME:${TAG::7}" -t "$IMAGE_NAME:latest" .
          docker push "$IMAGE_NAME:${TAG::7}"
          docker push "$IMAGE_NAME:latest"

      # ‚úÖ Install kubectl and eksctl
      - name: Install kubectl and eksctl
        run: |
          set -e
          # Install eksctl
          curl -sSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/
          eksctl version

          # Install kubectl
          KUBECTL_VERSION="$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)"
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client

      # ‚úÖ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ‚úÖ Create EKS Cluster if it doesn't exist
      - name: Check or Create EKS Cluster
        run: |
          set -e
          echo "Checking if EKS cluster \"$CLUSTER_NAME\" exists in region \"$REGION\"..."
          if aws eks describe-cluster --name "$CLUSTER_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "‚úÖ EKS cluster \"$CLUSTER_NAME\" already exists."
          else
            echo "üöÄ Creating EKS cluster \"$CLUSTER_NAME\"..."
            eksctl create cluster \
              --name "$CLUSTER_NAME" \
              --region "$REGION" \
              --nodegroup-name standard-workers \
              --node-type t3.medium \
              --nodes 2 \
              --nodes-min 1 \
              --nodes-max 3 \
              --managed \
              --verbose 4
          fi

      # ‚úÖ Update kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name "$CLUSTER_NAME" --region "$REGION"
          kubectl get nodes

      # ‚úÖ Deploy Frontend to EKS
      - name: Deploy Frontend
        run: |
          echo "üì¶ Deploying image: $IMAGE_NAME:${TAG::7}"
          sed -i "s|image: .*|image: $IMAGE_NAME:${TAG::7}|" frontend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml

      # ‚úÖ Verify Deployment Rollout
      - name: Verify Deployment
        run: |
          echo "üîç Verifying rollout of frontend-deployment"
          kubectl rollout status deployment/frontend-deployment
