name: Deploy Frontend to EKS with HTTPS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout code
      - name: Checkout
        uses: actions/checkout@v3

      # ✅ Setup Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ✅ Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          IMAGE="${{ secrets.DOCKER_USERNAME }}/frontend"
          TAG="${GITHUB_SHA::7}"
          docker build -t "$IMAGE:$TAG" -t "$IMAGE:latest" .
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

      # ✅ Install eksctl and kubectl
      - name: Install eksctl and kubectl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin

      # ✅ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # ✅ Update kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --region ${{ secrets.AWS_REGION }}

      # ✅ Install cert-manager
      - name: Install cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/latest/download/cert-manager.yaml
          kubectl rollout status deployment/cert-manager -n cert-manager --timeout=120s
          kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=120s
          kubectl rollout status deployment/cert-manager-cainjector -n cert-manager --timeout=120s

      # ✅ Create ClusterIssuer for Let's Encrypt
      - name: Apply ClusterIssuer
        run: |
          cat <<EOF | kubectl apply -f -
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: you@autovrse.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
EOF

      # ✅ Install NGINX Ingress Controller
      - name: Install NGINX Ingress
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.9.4/deploy/static/provider/aws/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=Ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=180s

      # ✅ Deploy frontend Kubernetes manifests
      - name: Deploy Frontend
        run: |
          IMAGE="${{ secrets.DOCKER_USERNAME }}/frontend"
          TAG="${GITHUB_SHA::7}"
          sed -i "s|image: .*|image: $IMAGE:$TAG|" frontend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl apply -f frontend-ingress.yaml

      # ✅ Wait for frontend rollout
      - name: Wait for Deployment
        run: kubectl rollout status deployment/frontend-deployment

      # ✅ Output final URL
      - name: Show Frontend URL
        run: echo "✅ Your frontend is live at: https://poc.autovrse-training.com"
