name: Deploy to AWS Amplify

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AMPLIFY_APP_NAME: ${{ secrets.AMPLIFY_APP_NAME }}
      AMPLIFY_DOMAIN_NAME: ${{ secrets.AMPLIFY_DOMAIN_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Detect build output folder
        run: |
          if [ -d "build" ]; then
            echo "OUTPUT_FOLDER=build" >> $GITHUB_ENV
          elif [ -d "dist" ]; then
            echo "OUTPUT_FOLDER=dist" >> $GITHUB_ENV
          else
            echo "No build folder found!"
            exit 1
          fi

      - name: Zip build output
        run: |
          cd $OUTPUT_FOLDER
          zip -r ../deployment.zip .
          cd ..

      - name: Create Amplify App if not exists
        id: create_app
        run: |
          echo "üîç Checking if Amplify app exists..."
          APP_ID=$(aws amplify list-apps --query "apps[?name=='$AMPLIFY_APP_NAME'].appId" --output text)
          
          if [ -z "$APP_ID" ]; then
            echo "üöÄ Creating new Amplify app: $AMPLIFY_APP_NAME"
            APP_ID=$(aws amplify create-app \
              --name "$AMPLIFY_APP_NAME" \
              --repository "https://github.com/${{ github.repository }}" \
              --oauth-token "${{ secrets.GITHUB_TOKEN }}" \
              --query 'app.appId' \
              --output text)
          else
            echo "‚úÖ Amplify app already exists."
          fi
          
          echo "AMPLIFY_APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "‚úÖ App ID: $APP_ID"

      - name: Create or update main branch
        run: |
          BRANCH_EXISTS=$(aws amplify list-branches --app-id $AMPLIFY_APP_ID \
            --query "branches[?branchName=='main'].branchName" --output text)

          if [ "$BRANCH_EXISTS" == "main" ]; then
            echo "üîÅ Updating existing 'main' branch..."
            aws amplify update-branch \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --enable-auto-build
          else
            echo "üå± Creating 'main' branch..."
            aws amplify create-branch \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --enable-auto-build
          fi

      - name: Deploy manually if repo not connected
        run: |
          REPO_INFO=$(aws amplify get-app --app-id $AMPLIFY_APP_ID --query 'app.repository' --output text)
          echo "üì¶ Repo Info: $REPO_INFO"

          if [ "$REPO_INFO" == "None" ]; then
            echo "üì§ Manual upload mode"
            DEPLOYMENT_ID=$(aws amplify create-deployment \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --query 'deploymentId' --output text)
            echo "Deployment ID: $DEPLOYMENT_ID"

            aws amplify upload-files \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --deployment-id $DEPLOYMENT_ID \
              --file deployment.zip

            aws amplify start-job \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --job-type RELEASE
          else
            echo "‚úÖ Repo is connected, triggering release"
            aws amplify start-job \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --job-type RELEASE
          fi

      - name: Setup custom domain (if provided)
        if: env.AMPLIFY_DOMAIN_NAME != ''
        run: |
          echo "üåê Configuring custom domain: $AMPLIFY_DOMAIN_NAME"
          EXISTS=$(aws amplify list-domain-associations \
            --app-id $AMPLIFY_APP_ID \
            --query "domainAssociations[?domainName=='$AMPLIFY_DOMAIN_NAME'].domainName" \
            --output text || echo "")

          if [ -z "$EXISTS" ]; then
            aws amplify create-domain-association \
              --app-id $AMPLIFY_APP_ID \
              --domain-name $AMPLIFY_DOMAIN_NAME \
              --sub-domain-settings '[{"prefix":"main","branchName":"main"}]'
            echo "üìù Domain association created. Please verify DNS manually."
          else
            echo "‚úÖ Domain already associated."
          fi

      - name: Output Amplify URL
        run: |
          URL=$(aws amplify get-app \
            --app-id $AMPLIFY_APP_ID \
            --query 'app.defaultDomain' \
            --output text)
          echo "üöÄ App deployed at: https://main.$URL"
