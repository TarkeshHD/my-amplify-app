name: Deploy to AWS Amplify (Auto-Fix Lockfile)

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AMPLIFY_APP_NAME: ${{ secrets.AMPLIFY_APP_NAME }}
      AMPLIFY_DOMAIN_NAME: ${{ secrets.AMPLIFY_DOMAIN_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Try npm ci (strict install)
        id: npm_ci
        run: |
          echo "üöÄ Running npm ci..."
          npm ci || echo "ci_failed=true" >> $GITHUB_ENV

      - name: Fallback to npm install and re-lock (if npm ci fails)
        if: env.ci_failed == 'true'
        run: |
          echo "‚ö†Ô∏è npm ci failed. Falling back to npm install..."
          rm -rf node_modules package-lock.json
          npm install
          echo "‚úÖ npm install completed. Committing new lockfile..."
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package-lock.json
          git commit -m "Fix: auto-regenerated package-lock.json via GitHub Action" || echo "Nothing to commit"
          git push || echo "Nothing to push"

      - name: Build project
        run: npm run build

      - name: Detect build output folder
        id: detect_folder
        run: |
          if [ -d "build" ]; then
            echo "OUTPUT_FOLDER=build" >> $GITHUB_ENV
          elif [ -d "dist" ]; then
            echo "OUTPUT_FOLDER=dist" >> $GITHUB_ENV
          else
            echo "‚ùå No output folder (build or dist) found!"
            exit 1
          fi

      - name: Zip build output
        run: |
          cd $OUTPUT_FOLDER
          zip -r ../deployment.zip .
          cd ..

      - name: Fetch Amplify App ID
        id: fetch_app
        run: |
          APP_ID=$(aws amplify list-apps --query "apps[?name=='$AMPLIFY_APP_NAME'].appId" --output text)
          if [ -z "$APP_ID" ]; then
            echo "‚ùå Amplify App '$AMPLIFY_APP_NAME' not found!"
            exit 1
          fi
          echo "AMPLIFY_APP_ID=$APP_ID" >> $GITHUB_ENV
          REPO_INFO=$(aws amplify get-app --app-id $APP_ID --query 'app.repository' --output text)
          echo "REPO_INFO=$REPO_INFO" >> $GITHUB_ENV

      - name: Ensure branch 'main' exists in Amplify
        run: |
          BRANCH_EXISTS=$(aws amplify list-branches --app-id $AMPLIFY_APP_ID --query "branches[?branchName=='main'].branchName" --output text)
          if [ "$BRANCH_EXISTS" != "main" ]; then
            aws amplify create-branch \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --framework "React" \
              --stage "PRODUCTION" \
              --enable-auto-build
          fi

      - name: Manage custom domain (optional)
        if: env.AMPLIFY_DOMAIN_NAME != ''
        run: |
          EXISTS=$(aws amplify list-domain-associations \
            --app-id $AMPLIFY_APP_ID \
            --query "domainAssociations[?domainName=='$AMPLIFY_DOMAIN_NAME'].domainName" \
            --output text || echo "")
          if [ -z "$EXISTS" ]; then
            aws amplify create-domain-association \
              --app-id $AMPLIFY_APP_ID \
              --domain-name $AMPLIFY_DOMAIN_NAME \
              --sub-domain-settings '[{"prefix":"main","branchName":"main"}]'
          fi

      - name: Deploy to Amplify
        run: |
          if [ "$REPO_INFO" != "None" ]; then
            RUNNING=$(aws amplify list-jobs \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --query "jobSummaries[?status=='PENDING' || status=='RUNNING'].jobId" \
              --output text || echo "")
            if [ -n "$RUNNING" ]; then
              echo "‚ö†Ô∏è Job is already running. Skipping deployment."
              exit 0
            fi
            aws amplify start-job \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --job-type RELEASE
          else
            DEPLOYMENT_ID=$(aws amplify create-deployment \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --query 'deploymentId' \
              --output text)
            aws amplify upload-files \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --deployment-id $DEPLOYMENT_ID \
              --file deployment.zip
            aws amplify start-job \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --job-type RELEASE
          fi

      - name: Output Amplify URL
        run: |
          DOMAIN=$(aws amplify get-app \
            --app-id $AMPLIFY_APP_ID \
            --query 'app.defaultDomain' \
            --output text)
          echo "‚úÖ App deployed at: https://main.$DOMAIN"
