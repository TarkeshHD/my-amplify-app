name: Deploy to AWS Amplify (Automated)

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AMPLIFY_APP_NAME: ${{ secrets.AMPLIFY_APP_NAME }}
      AMPLIFY_DOMAIN_NAME: ${{ secrets.AMPLIFY_DOMAIN_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build project
        run: npm run build

      - name: Set output folder (build or dist)
        run: |
          if [ -d "build" ]; then
            echo "OUTPUT_FOLDER=build" >> $GITHUB_ENV
          elif [ -d "dist" ]; then
            echo "OUTPUT_FOLDER=dist" >> $GITHUB_ENV
          else
            echo "‚ùå No output folder found!"
            exit 1
          fi

      - name: Zip output for Amplify
        run: |
          cd $OUTPUT_FOLDER
          zip -r ../deployment.zip .
          cd ..

      - name: Get Amplify App ID and Repo Info
        run: |
          echo "üîç Fetching Amplify App ID..."
          APP_ID=$(aws amplify list-apps --query "apps[?name=='$AMPLIFY_APP_NAME'].appId" --output text)
          if [ -z "$APP_ID" ]; then
            echo "‚ùå Amplify app '$AMPLIFY_APP_NAME' not found!"
            exit 1
          fi
          echo "AMPLIFY_APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "‚úÖ Amplify App ID: $APP_ID"

          REPO_INFO=$(aws amplify get-app --app-id $APP_ID --query 'app.repository' --output text)
          echo "REPO_INFO=$REPO_INFO" >> $GITHUB_ENV
          echo "üì¶ Repo Info: $REPO_INFO"

      - name: Create main branch in Amplify if missing
        run: |
          BRANCH_EXISTS=$(aws amplify list-branches --app-id $AMPLIFY_APP_ID --query "branches[?branchName=='main'].branchName" --output text)
          if [ "$BRANCH_EXISTS" != "main" ]; then
            echo "üîß Creating 'main' branch in Amplify..."
            aws amplify create-branch \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --framework "React" \
              --stage "PRODUCTION" \
              --enable-auto-build
          else
            echo "‚úÖ 'main' branch already exists in Amplify"
          fi

      - name: Setup custom domain (if provided)
        if: env.AMPLIFY_DOMAIN_NAME != ''
        run: |
          echo "üåê Checking domain: $AMPLIFY_DOMAIN_NAME"
          DOMAIN_EXISTS=$(aws amplify list-domain-associations \
            --app-id $AMPLIFY_APP_ID \
            --query "domainAssociations[?domainName=='$AMPLIFY_DOMAIN_NAME'].domainName" \
            --output text || echo "")
          if [ -z "$DOMAIN_EXISTS" ]; then
            aws amplify create-domain-association \
              --app-id $AMPLIFY_APP_ID \
              --domain-name $AMPLIFY_DOMAIN_NAME \
              --sub-domain-settings '[{"prefix":"main","branchName":"main"}]'
            echo "‚úÖ Domain $AMPLIFY_DOMAIN_NAME connected"
          else
            echo "‚úÖ Domain already connected"
          fi

      - name: Deploy to Amplify manually (always works)
        run: |
          echo "üì¶ Manual deployment to Amplify"
          while :
          do
            STATUS=$(aws amplify list-jobs \
              --app-id $AMPLIFY_APP_ID \
              --branch-name main \
              --query "jobSummaries[0].status" \
              --output text)
            if [[ "$STATUS" != "PENDING" && "$STATUS" != "RUNNING" ]]; then
              break
            fi
            echo "‚è≥ Waiting for existing job to finish ($STATUS)..."
            sleep 10
          done

          DEPLOYMENT_ID=$(aws amplify create-deployment \
            --app-id $AMPLIFY_APP_ID \
            --branch-name main \
            --query 'deploymentId' \
            --output text)

          aws amplify upload-files \
            --app-id $AMPLIFY_APP_ID \
            --branch-name main \
            --deployment-id $DEPLOYMENT_ID \
            --file deployment.zip

          aws amplify start-job \
            --app-id $AMPLIFY_APP_ID \
            --branch-name main \
            --job-type RELEASE

      - name: Output deployed URL
        run: |
          DOMAIN=$(aws amplify get-app \
            --app-id $AMPLIFY_APP_ID \
            --query 'app.defaultDomain' \
            --output text)
          echo "‚úÖ Deployed: https://main.$DOMAIN"
